//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.BackPressure = {
  'NONE' : 0,
  'ENQUEUE' : 1,
  'DROP_HEAD' : 2,
  'DROP_TAIL' : 3,
  'BLOCK_SENDER' : 4
};
ttypes.StreamGrouping = {
  'ROUND_ROBIN' : 0,
  'SHUFFLE' : 1,
  'GROUP_BY' : 2,
  'LOCAL' : 3,
  'CUSTOM' : 100
};
ttypes.Signal = {
  'START' : 0,
  'ACTIVE' : 1,
  'INACTIVE' : 2,
  'SHUTDOWN' : 3,
  'KILL' : 4
};
ttypes.RecordFlags = {
  'CLIENT_RECORD' : 1,
  'FRAMEWORK_RECORD' : 2
};
ttypes.AnnotationType = {
  'CLIENT_SEND' : 0,
  'CLIENT_RECV' : 1,
  'SERVER_SEND' : 2,
  'SERVER_RECV' : 3
};
BoltError = module.exports.BoltError = function(args) {
  Thrift.TException.call(this, "BoltError")
  this.name = "BoltError"
  this.reason = null;
  this.context = null;
  this.time = null;
  if (args) {
    if (args.reason !== undefined) {
      this.reason = args.reason;
    }
    if (args.context !== undefined) {
      this.context = args.context;
    }
    if (args.time !== undefined) {
      this.time = args.time;
    }
  }
};
Thrift.inherits(BoltError, Thrift.TException);
BoltError.prototype.name = 'BoltError';
BoltError.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.context = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BoltError.prototype.write = function(output) {
  output.writeStructBegin('BoltError');
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 1);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  if (this.context !== null && this.context !== undefined) {
    output.writeFieldBegin('context', Thrift.Type.STRING, 2);
    output.writeString(this.context);
    output.writeFieldEnd();
  }
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.I64, 3);
    output.writeI64(this.time);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Endpoint = module.exports.Endpoint = function(args) {
  this.ip = null;
  this.port = null;
  if (args) {
    if (args.ip !== undefined) {
      this.ip = args.ip;
    }
    if (args.port !== undefined) {
      this.port = args.port;
    }
  }
};
Endpoint.prototype = {};
Endpoint.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ip = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.port = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Endpoint.prototype.write = function(output) {
  output.writeStructBegin('Endpoint');
  if (this.ip !== null && this.ip !== undefined) {
    output.writeFieldBegin('ip', Thrift.Type.STRING, 1);
    output.writeString(this.ip);
    output.writeFieldEnd();
  }
  if (this.port !== null && this.port !== undefined) {
    output.writeFieldBegin('port', Thrift.Type.I16, 2);
    output.writeI16(this.port);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StreamMetadata = module.exports.StreamMetadata = function(args) {
  this.name = null;
  this.grouping = 1;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.grouping !== undefined) {
      this.grouping = args.grouping;
    }
  }
};
StreamMetadata.prototype = {};
StreamMetadata.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.grouping = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StreamMetadata.prototype.write = function(output) {
  output.writeStructBegin('StreamMetadata');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.grouping !== null && this.grouping !== undefined) {
    output.writeFieldBegin('grouping', Thrift.Type.I32, 2);
    output.writeI32(this.grouping);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ComputationMetadata = module.exports.ComputationMetadata = function(args) {
  this.name = null;
  this.taskId = null;
  this.istreams = null;
  this.ostreams = null;
  this.proxyEndpoint = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.taskId !== undefined) {
      this.taskId = args.taskId;
    }
    if (args.istreams !== undefined) {
      this.istreams = args.istreams;
    }
    if (args.ostreams !== undefined) {
      this.ostreams = args.ostreams;
    }
    if (args.proxyEndpoint !== undefined) {
      this.proxyEndpoint = args.proxyEndpoint;
    }
  }
};
ComputationMetadata.prototype = {};
ComputationMetadata.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.taskId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.istreams = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.StreamMetadata();
          elem6.read(input);
          this.istreams.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.ostreams = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = new ttypes.StreamMetadata();
          elem13.read(input);
          this.ostreams.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.proxyEndpoint = new ttypes.Endpoint();
        this.proxyEndpoint.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ComputationMetadata.prototype.write = function(output) {
  output.writeStructBegin('ComputationMetadata');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.taskId !== null && this.taskId !== undefined) {
    output.writeFieldBegin('taskId', Thrift.Type.STRING, 2);
    output.writeString(this.taskId);
    output.writeFieldEnd();
  }
  if (this.istreams !== null && this.istreams !== undefined) {
    output.writeFieldBegin('istreams', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.istreams.length);
    for (var iter14 in this.istreams)
    {
      if (this.istreams.hasOwnProperty(iter14))
      {
        iter14 = this.istreams[iter14];
        iter14.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ostreams !== null && this.ostreams !== undefined) {
    output.writeFieldBegin('ostreams', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.ostreams.length);
    for (var iter15 in this.ostreams)
    {
      if (this.ostreams.hasOwnProperty(iter15))
      {
        iter15 = this.ostreams[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.proxyEndpoint !== null && this.proxyEndpoint !== undefined) {
    output.writeFieldBegin('proxyEndpoint', Thrift.Type.STRUCT, 5);
    this.proxyEndpoint.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExecutorTaskInfoHelper = module.exports.ExecutorTaskInfoHelper = function(args) {
  this.frameworkLoggingLevel = 1;
  this.user = null;
  this.frameworkVModule = null;
  this.scheduler = null;
  this.proxy = null;
  this.client = null;
  this.traceAggregator = null;
  this.execName = null;
  this.folder = null;
  this.computationAliasName = null;
  this.clientArguments = null;
  this.environmentExtra = null;
  this.dockerContainer = null;
  if (args) {
    if (args.frameworkLoggingLevel !== undefined) {
      this.frameworkLoggingLevel = args.frameworkLoggingLevel;
    }
    if (args.user !== undefined) {
      this.user = args.user;
    }
    if (args.frameworkVModule !== undefined) {
      this.frameworkVModule = args.frameworkVModule;
    }
    if (args.scheduler !== undefined) {
      this.scheduler = args.scheduler;
    }
    if (args.proxy !== undefined) {
      this.proxy = args.proxy;
    }
    if (args.client !== undefined) {
      this.client = args.client;
    }
    if (args.traceAggregator !== undefined) {
      this.traceAggregator = args.traceAggregator;
    }
    if (args.execName !== undefined) {
      this.execName = args.execName;
    }
    if (args.folder !== undefined) {
      this.folder = args.folder;
    }
    if (args.computationAliasName !== undefined) {
      this.computationAliasName = args.computationAliasName;
    }
    if (args.clientArguments !== undefined) {
      this.clientArguments = args.clientArguments;
    }
    if (args.environmentExtra !== undefined) {
      this.environmentExtra = args.environmentExtra;
    }
    if (args.dockerContainer !== undefined) {
      this.dockerContainer = args.dockerContainer;
    }
  }
};
ExecutorTaskInfoHelper.prototype = {};
ExecutorTaskInfoHelper.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.frameworkLoggingLevel = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.frameworkVModule = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.scheduler = new ttypes.Endpoint();
        this.scheduler.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.proxy = new ttypes.Endpoint();
        this.proxy.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.client = new ttypes.Endpoint();
        this.client.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.traceAggregator = new ttypes.Endpoint();
        this.traceAggregator.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.execName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.folder = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.computationAliasName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.clientArguments = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = input.readString();
          this.clientArguments.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        var _size23 = 0;
        var _rtmp327;
        this.environmentExtra = [];
        var _etype26 = 0;
        _rtmp327 = input.readListBegin();
        _etype26 = _rtmp327.etype;
        _size23 = _rtmp327.size;
        for (var _i28 = 0; _i28 < _size23; ++_i28)
        {
          var elem29 = null;
          elem29 = input.readString();
          this.environmentExtra.push(elem29);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.dockerContainer = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExecutorTaskInfoHelper.prototype.write = function(output) {
  output.writeStructBegin('ExecutorTaskInfoHelper');
  if (this.frameworkLoggingLevel !== null && this.frameworkLoggingLevel !== undefined) {
    output.writeFieldBegin('frameworkLoggingLevel', Thrift.Type.I32, 1);
    output.writeI32(this.frameworkLoggingLevel);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 2);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.frameworkVModule !== null && this.frameworkVModule !== undefined) {
    output.writeFieldBegin('frameworkVModule', Thrift.Type.STRING, 3);
    output.writeString(this.frameworkVModule);
    output.writeFieldEnd();
  }
  if (this.scheduler !== null && this.scheduler !== undefined) {
    output.writeFieldBegin('scheduler', Thrift.Type.STRUCT, 4);
    this.scheduler.write(output);
    output.writeFieldEnd();
  }
  if (this.proxy !== null && this.proxy !== undefined) {
    output.writeFieldBegin('proxy', Thrift.Type.STRUCT, 5);
    this.proxy.write(output);
    output.writeFieldEnd();
  }
  if (this.client !== null && this.client !== undefined) {
    output.writeFieldBegin('client', Thrift.Type.STRUCT, 6);
    this.client.write(output);
    output.writeFieldEnd();
  }
  if (this.traceAggregator !== null && this.traceAggregator !== undefined) {
    output.writeFieldBegin('traceAggregator', Thrift.Type.STRUCT, 7);
    this.traceAggregator.write(output);
    output.writeFieldEnd();
  }
  if (this.execName !== null && this.execName !== undefined) {
    output.writeFieldBegin('execName', Thrift.Type.STRING, 8);
    output.writeString(this.execName);
    output.writeFieldEnd();
  }
  if (this.folder !== null && this.folder !== undefined) {
    output.writeFieldBegin('folder', Thrift.Type.STRING, 9);
    output.writeString(this.folder);
    output.writeFieldEnd();
  }
  if (this.computationAliasName !== null && this.computationAliasName !== undefined) {
    output.writeFieldBegin('computationAliasName', Thrift.Type.STRING, 10);
    output.writeString(this.computationAliasName);
    output.writeFieldEnd();
  }
  if (this.clientArguments !== null && this.clientArguments !== undefined) {
    output.writeFieldBegin('clientArguments', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.STRING, this.clientArguments.length);
    for (var iter30 in this.clientArguments)
    {
      if (this.clientArguments.hasOwnProperty(iter30))
      {
        iter30 = this.clientArguments[iter30];
        output.writeString(iter30);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.environmentExtra !== null && this.environmentExtra !== undefined) {
    output.writeFieldBegin('environmentExtra', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.STRING, this.environmentExtra.length);
    for (var iter31 in this.environmentExtra)
    {
      if (this.environmentExtra.hasOwnProperty(iter31))
      {
        iter31 = this.environmentExtra[iter31];
        output.writeString(iter31);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.dockerContainer !== null && this.dockerContainer !== undefined) {
    output.writeFieldBegin('dockerContainer', Thrift.Type.STRING, 13);
    output.writeString(this.dockerContainer);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PhysicalComputationMetdata = module.exports.PhysicalComputationMetdata = function(args) {
  this.taskId = null;
  this.slaveId = null;
  this.cpus = null;
  this.mem = null;
  this.disk = null;
  this.taskHelper = null;
  this.needsReconciliation = null;
  if (args) {
    if (args.taskId !== undefined) {
      this.taskId = args.taskId;
    }
    if (args.slaveId !== undefined) {
      this.slaveId = args.slaveId;
    }
    if (args.cpus !== undefined) {
      this.cpus = args.cpus;
    }
    if (args.mem !== undefined) {
      this.mem = args.mem;
    }
    if (args.disk !== undefined) {
      this.disk = args.disk;
    }
    if (args.taskHelper !== undefined) {
      this.taskHelper = args.taskHelper;
    }
    if (args.needsReconciliation !== undefined) {
      this.needsReconciliation = args.needsReconciliation;
    }
  }
};
PhysicalComputationMetdata.prototype = {};
PhysicalComputationMetdata.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.taskId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.slaveId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.cpus = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.mem = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.disk = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.taskHelper = new ttypes.ExecutorTaskInfoHelper();
        this.taskHelper.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.needsReconciliation = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PhysicalComputationMetdata.prototype.write = function(output) {
  output.writeStructBegin('PhysicalComputationMetdata');
  if (this.taskId !== null && this.taskId !== undefined) {
    output.writeFieldBegin('taskId', Thrift.Type.STRING, 1);
    output.writeString(this.taskId);
    output.writeFieldEnd();
  }
  if (this.slaveId !== null && this.slaveId !== undefined) {
    output.writeFieldBegin('slaveId', Thrift.Type.STRING, 2);
    output.writeString(this.slaveId);
    output.writeFieldEnd();
  }
  if (this.cpus !== null && this.cpus !== undefined) {
    output.writeFieldBegin('cpus', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.cpus);
    output.writeFieldEnd();
  }
  if (this.mem !== null && this.mem !== undefined) {
    output.writeFieldBegin('mem', Thrift.Type.I32, 4);
    output.writeI32(this.mem);
    output.writeFieldEnd();
  }
  if (this.disk !== null && this.disk !== undefined) {
    output.writeFieldBegin('disk', Thrift.Type.I32, 5);
    output.writeI32(this.disk);
    output.writeFieldEnd();
  }
  if (this.taskHelper !== null && this.taskHelper !== undefined) {
    output.writeFieldBegin('taskHelper', Thrift.Type.STRUCT, 6);
    this.taskHelper.write(output);
    output.writeFieldEnd();
  }
  if (this.needsReconciliation !== null && this.needsReconciliation !== undefined) {
    output.writeFieldBegin('needsReconciliation', Thrift.Type.BOOL, 7);
    output.writeBool(this.needsReconciliation);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PhysicalComputationLayout = module.exports.PhysicalComputationLayout = function(args) {
  this.name = null;
  this.istreams = null;
  this.ostreams = null;
  this.nodes = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.istreams !== undefined) {
      this.istreams = args.istreams;
    }
    if (args.ostreams !== undefined) {
      this.ostreams = args.ostreams;
    }
    if (args.nodes !== undefined) {
      this.nodes = args.nodes;
    }
  }
};
PhysicalComputationLayout.prototype = {};
PhysicalComputationLayout.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.istreams = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new ttypes.StreamMetadata();
          elem38.read(input);
          this.istreams.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size39 = 0;
        var _rtmp343;
        this.ostreams = [];
        var _etype42 = 0;
        _rtmp343 = input.readListBegin();
        _etype42 = _rtmp343.etype;
        _size39 = _rtmp343.size;
        for (var _i44 = 0; _i44 < _size39; ++_i44)
        {
          var elem45 = null;
          elem45 = new ttypes.StreamMetadata();
          elem45.read(input);
          this.ostreams.push(elem45);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size46 = 0;
        var _rtmp350;
        this.nodes = [];
        var _etype49 = 0;
        _rtmp350 = input.readListBegin();
        _etype49 = _rtmp350.etype;
        _size46 = _rtmp350.size;
        for (var _i51 = 0; _i51 < _size46; ++_i51)
        {
          var elem52 = null;
          elem52 = new ttypes.PhysicalComputationMetdata();
          elem52.read(input);
          this.nodes.push(elem52);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PhysicalComputationLayout.prototype.write = function(output) {
  output.writeStructBegin('PhysicalComputationLayout');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.istreams !== null && this.istreams !== undefined) {
    output.writeFieldBegin('istreams', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.istreams.length);
    for (var iter53 in this.istreams)
    {
      if (this.istreams.hasOwnProperty(iter53))
      {
        iter53 = this.istreams[iter53];
        iter53.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ostreams !== null && this.ostreams !== undefined) {
    output.writeFieldBegin('ostreams', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.ostreams.length);
    for (var iter54 in this.ostreams)
    {
      if (this.ostreams.hasOwnProperty(iter54))
      {
        iter54 = this.ostreams[iter54];
        iter54.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.nodes !== null && this.nodes !== undefined) {
    output.writeFieldBegin('nodes', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.nodes.length);
    for (var iter55 in this.nodes)
    {
      if (this.nodes.hasOwnProperty(iter55))
      {
        iter55 = this.nodes[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SchedulerMetadata = module.exports.SchedulerMetadata = function(args) {
  this.endpoint = null;
  this.version = null;
  if (args) {
    if (args.endpoint !== undefined) {
      this.endpoint = args.endpoint;
    }
    if (args.version !== undefined) {
      this.version = args.version;
    }
  }
};
SchedulerMetadata.prototype = {};
SchedulerMetadata.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.endpoint = new ttypes.Endpoint();
        this.endpoint.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.version = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SchedulerMetadata.prototype.write = function(output) {
  output.writeStructBegin('SchedulerMetadata');
  if (this.endpoint !== null && this.endpoint !== undefined) {
    output.writeFieldBegin('endpoint', Thrift.Type.STRUCT, 1);
    this.endpoint.write(output);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I32, 2);
    output.writeI32(this.version);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TopologyMetadata = module.exports.TopologyMetadata = function(args) {
  this.version = 0;
  this.hash = null;
  this.computations = null;
  if (args) {
    if (args.version !== undefined) {
      this.version = args.version;
    }
    if (args.hash !== undefined) {
      this.hash = args.hash;
    }
    if (args.computations !== undefined) {
      this.computations = args.computations;
    }
  }
};
TopologyMetadata.prototype = {};
TopologyMetadata.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.version = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.hash = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size56 = 0;
        var _rtmp360;
        this.computations = {};
        var _ktype57 = 0;
        var _vtype58 = 0;
        _rtmp360 = input.readMapBegin();
        _ktype57 = _rtmp360.ktype;
        _vtype58 = _rtmp360.vtype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var key62 = null;
          var val63 = null;
          key62 = input.readString();
          val63 = new ttypes.PhysicalComputationLayout();
          val63.read(input);
          this.computations[key62] = val63;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TopologyMetadata.prototype.write = function(output) {
  output.writeStructBegin('TopologyMetadata');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I32, 1);
    output.writeI32(this.version);
    output.writeFieldEnd();
  }
  if (this.hash !== null && this.hash !== undefined) {
    output.writeFieldBegin('hash', Thrift.Type.STRING, 2);
    output.writeString(this.hash);
    output.writeFieldEnd();
  }
  if (this.computations !== null && this.computations !== undefined) {
    output.writeFieldBegin('computations', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.computations));
    for (var kiter64 in this.computations)
    {
      if (this.computations.hasOwnProperty(kiter64))
      {
        var viter65 = this.computations[kiter64];
        output.writeString(kiter64);
        viter65.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RecordMetadata = module.exports.RecordMetadata = function(args) {
  this.traceId = 0;
  this.sourceSpanId = 0;
  this.flags = 0;
  this.stream = 0;
  this.timestamp = 0;
  if (args) {
    if (args.traceId !== undefined) {
      this.traceId = args.traceId;
    }
    if (args.sourceSpanId !== undefined) {
      this.sourceSpanId = args.sourceSpanId;
    }
    if (args.flags !== undefined) {
      this.flags = args.flags;
    }
    if (args.stream !== undefined) {
      this.stream = args.stream;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
  }
};
RecordMetadata.prototype = {};
RecordMetadata.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.traceId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.sourceSpanId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.flags = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.stream = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RecordMetadata.prototype.write = function(output) {
  output.writeStructBegin('RecordMetadata');
  if (this.traceId !== null && this.traceId !== undefined) {
    output.writeFieldBegin('traceId', Thrift.Type.I64, 1);
    output.writeI64(this.traceId);
    output.writeFieldEnd();
  }
  if (this.sourceSpanId !== null && this.sourceSpanId !== undefined) {
    output.writeFieldBegin('sourceSpanId', Thrift.Type.I64, 2);
    output.writeI64(this.sourceSpanId);
    output.writeFieldEnd();
  }
  if (this.flags !== null && this.flags !== undefined) {
    output.writeFieldBegin('flags', Thrift.Type.I32, 3);
    output.writeI32(this.flags);
    output.writeFieldEnd();
  }
  if (this.stream !== null && this.stream !== undefined) {
    output.writeFieldBegin('stream', Thrift.Type.I64, 4);
    output.writeI64(this.stream);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 5);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Record = module.exports.Record = function(args) {
  this.meta = null;
  this.time = 0;
  this.key = null;
  this.data = null;
  this.userStream = null;
  if (args) {
    if (args.meta !== undefined) {
      this.meta = args.meta;
    }
    if (args.time !== undefined) {
      this.time = args.time;
    }
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.data !== undefined) {
      this.data = args.data;
    }
    if (args.userStream !== undefined) {
      this.userStream = args.userStream;
    }
  }
};
Record.prototype = {};
Record.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.meta = new ttypes.RecordMetadata();
        this.meta.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.data = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.userStream = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Record.prototype.write = function(output) {
  output.writeStructBegin('Record');
  if (this.meta !== null && this.meta !== undefined) {
    output.writeFieldBegin('meta', Thrift.Type.STRUCT, 1);
    this.meta.write(output);
    output.writeFieldEnd();
  }
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.I64, 2);
    output.writeI64(this.time);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 3);
    output.writeBinary(this.key);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRING, 4);
    output.writeBinary(this.data);
    output.writeFieldEnd();
  }
  if (this.userStream !== null && this.userStream !== undefined) {
    output.writeFieldBegin('userStream', Thrift.Type.STRING, 5);
    output.writeBinary(this.userStream);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ComputationTx = module.exports.ComputationTx = function(args) {
  this.id = 0;
  this.records = null;
  this.timers = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.records !== undefined) {
      this.records = args.records;
    }
    if (args.timers !== undefined) {
      this.timers = args.timers;
    }
  }
};
ComputationTx.prototype = {};
ComputationTx.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size66 = 0;
        var _rtmp370;
        this.records = [];
        var _etype69 = 0;
        _rtmp370 = input.readListBegin();
        _etype69 = _rtmp370.etype;
        _size66 = _rtmp370.size;
        for (var _i71 = 0; _i71 < _size66; ++_i71)
        {
          var elem72 = null;
          elem72 = new ttypes.Record();
          elem72.read(input);
          this.records.push(elem72);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size73 = 0;
        var _rtmp377;
        this.timers = {};
        var _ktype74 = 0;
        var _vtype75 = 0;
        _rtmp377 = input.readMapBegin();
        _ktype74 = _rtmp377.ktype;
        _vtype75 = _rtmp377.vtype;
        _size73 = _rtmp377.size;
        for (var _i78 = 0; _i78 < _size73; ++_i78)
        {
          var key79 = null;
          var val80 = null;
          key79 = input.readString();
          val80 = input.readI64();
          this.timers[key79] = val80;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ComputationTx.prototype.write = function(output) {
  output.writeStructBegin('ComputationTx');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.records !== null && this.records !== undefined) {
    output.writeFieldBegin('records', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.records.length);
    for (var iter81 in this.records)
    {
      if (this.records.hasOwnProperty(iter81))
      {
        iter81 = this.records[iter81];
        iter81.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timers !== null && this.timers !== undefined) {
    output.writeFieldBegin('timers', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.I64, Thrift.objectLength(this.timers));
    for (var kiter82 in this.timers)
    {
      if (this.timers.hasOwnProperty(kiter82))
      {
        var viter83 = this.timers[kiter82];
        output.writeString(kiter82);
        output.writeI64(viter83);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RichStream = module.exports.RichStream = function(args) {
  this.stream = null;
  this.computationName = null;
  this.endpoints = null;
  if (args) {
    if (args.stream !== undefined) {
      this.stream = args.stream;
    }
    if (args.computationName !== undefined) {
      this.computationName = args.computationName;
    }
    if (args.endpoints !== undefined) {
      this.endpoints = args.endpoints;
    }
  }
};
RichStream.prototype = {};
RichStream.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.stream = new ttypes.StreamMetadata();
        this.stream.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.computationName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size84 = 0;
        var _rtmp388;
        this.endpoints = [];
        var _etype87 = 0;
        _rtmp388 = input.readListBegin();
        _etype87 = _rtmp388.etype;
        _size84 = _rtmp388.size;
        for (var _i89 = 0; _i89 < _size84; ++_i89)
        {
          var elem90 = null;
          elem90 = new ttypes.Endpoint();
          elem90.read(input);
          this.endpoints.push(elem90);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RichStream.prototype.write = function(output) {
  output.writeStructBegin('RichStream');
  if (this.stream !== null && this.stream !== undefined) {
    output.writeFieldBegin('stream', Thrift.Type.STRUCT, 1);
    this.stream.write(output);
    output.writeFieldEnd();
  }
  if (this.computationName !== null && this.computationName !== undefined) {
    output.writeFieldBegin('computationName', Thrift.Type.STRING, 2);
    output.writeString(this.computationName);
    output.writeFieldEnd();
  }
  if (this.endpoints !== null && this.endpoints !== undefined) {
    output.writeFieldBegin('endpoints', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.endpoints.length);
    for (var iter91 in this.endpoints)
    {
      if (this.endpoints.hasOwnProperty(iter91))
      {
        iter91 = this.endpoints[iter91];
        iter91.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BoltComputationRequest = module.exports.BoltComputationRequest = function(args) {
  this.name = null;
  this.instances = 1;
  this.cpus = 0.1;
  this.mem = 2048;
  this.disk = 10240;
  this.taskHelper = null;
  this.forceUpdateBinary = null;
  this.slug = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.instances !== undefined) {
      this.instances = args.instances;
    }
    if (args.cpus !== undefined) {
      this.cpus = args.cpus;
    }
    if (args.mem !== undefined) {
      this.mem = args.mem;
    }
    if (args.disk !== undefined) {
      this.disk = args.disk;
    }
    if (args.taskHelper !== undefined) {
      this.taskHelper = args.taskHelper;
    }
    if (args.forceUpdateBinary !== undefined) {
      this.forceUpdateBinary = args.forceUpdateBinary;
    }
    if (args.slug !== undefined) {
      this.slug = args.slug;
    }
  }
};
BoltComputationRequest.prototype = {};
BoltComputationRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.instances = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.cpus = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.mem = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.disk = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.taskHelper = new ttypes.ExecutorTaskInfoHelper();
        this.taskHelper.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.forceUpdateBinary = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.slug = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BoltComputationRequest.prototype.write = function(output) {
  output.writeStructBegin('BoltComputationRequest');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.instances !== null && this.instances !== undefined) {
    output.writeFieldBegin('instances', Thrift.Type.I64, 2);
    output.writeI64(this.instances);
    output.writeFieldEnd();
  }
  if (this.cpus !== null && this.cpus !== undefined) {
    output.writeFieldBegin('cpus', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.cpus);
    output.writeFieldEnd();
  }
  if (this.mem !== null && this.mem !== undefined) {
    output.writeFieldBegin('mem', Thrift.Type.I64, 4);
    output.writeI64(this.mem);
    output.writeFieldEnd();
  }
  if (this.disk !== null && this.disk !== undefined) {
    output.writeFieldBegin('disk', Thrift.Type.I64, 5);
    output.writeI64(this.disk);
    output.writeFieldEnd();
  }
  if (this.taskHelper !== null && this.taskHelper !== undefined) {
    output.writeFieldBegin('taskHelper', Thrift.Type.STRUCT, 6);
    this.taskHelper.write(output);
    output.writeFieldEnd();
  }
  if (this.forceUpdateBinary !== null && this.forceUpdateBinary !== undefined) {
    output.writeFieldBegin('forceUpdateBinary', Thrift.Type.BOOL, 7);
    output.writeBool(this.forceUpdateBinary);
    output.writeFieldEnd();
  }
  if (this.slug !== null && this.slug !== undefined) {
    output.writeFieldBegin('slug', Thrift.Type.STRING, 8);
    output.writeBinary(this.slug);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Annotation = module.exports.Annotation = function(args) {
  this.timestamp = null;
  this.type = null;
  this.key = null;
  this.value = null;
  this.host = null;
  if (args) {
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
    if (args.host !== undefined) {
      this.host = args.host;
    }
  }
};
Annotation.prototype = {};
Annotation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.host = new ttypes.Endpoint();
        this.host.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Annotation.prototype.write = function(output) {
  output.writeStructBegin('Annotation');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 1);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 3);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 4);
    output.writeBinary(this.value);
    output.writeFieldEnd();
  }
  if (this.host !== null && this.host !== undefined) {
    output.writeFieldBegin('host', Thrift.Type.STRUCT, 5);
    this.host.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Span = module.exports.Span = function(args) {
  this.traceId = null;
  this.id = null;
  this.parentId = null;
  this.name = null;
  this.annotations = null;
  if (args) {
    if (args.traceId !== undefined) {
      this.traceId = args.traceId;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.parentId !== undefined) {
      this.parentId = args.parentId;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.annotations !== undefined) {
      this.annotations = args.annotations;
    }
  }
};
Span.prototype = {};
Span.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.traceId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.parentId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size92 = 0;
        var _rtmp396;
        this.annotations = [];
        var _etype95 = 0;
        _rtmp396 = input.readListBegin();
        _etype95 = _rtmp396.etype;
        _size92 = _rtmp396.size;
        for (var _i97 = 0; _i97 < _size92; ++_i97)
        {
          var elem98 = null;
          elem98 = new ttypes.Annotation();
          elem98.read(input);
          this.annotations.push(elem98);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Span.prototype.write = function(output) {
  output.writeStructBegin('Span');
  if (this.traceId !== null && this.traceId !== undefined) {
    output.writeFieldBegin('traceId', Thrift.Type.I64, 1);
    output.writeI64(this.traceId);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 2);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.parentId !== null && this.parentId !== undefined) {
    output.writeFieldBegin('parentId', Thrift.Type.I64, 3);
    output.writeI64(this.parentId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 4);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.annotations !== null && this.annotations !== undefined) {
    output.writeFieldBegin('annotations', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.annotations.length);
    for (var iter99 in this.annotations)
    {
      if (this.annotations.hasOwnProperty(iter99))
      {
        iter99 = this.annotations[iter99];
        iter99.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Trace = module.exports.Trace = function(args) {
  this.id = null;
  this.spans = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.spans !== undefined) {
      this.spans = args.spans;
    }
  }
};
Trace.prototype = {};
Trace.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size100 = 0;
        var _rtmp3104;
        this.spans = [];
        var _etype103 = 0;
        _rtmp3104 = input.readListBegin();
        _etype103 = _rtmp3104.etype;
        _size100 = _rtmp3104.size;
        for (var _i105 = 0; _i105 < _size100; ++_i105)
        {
          var elem106 = null;
          elem106 = new ttypes.Span();
          elem106.read(input);
          this.spans.push(elem106);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Trace.prototype.write = function(output) {
  output.writeStructBegin('Trace');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.spans !== null && this.spans !== undefined) {
    output.writeFieldBegin('spans', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.spans.length);
    for (var iter107 in this.spans)
    {
      if (this.spans.hasOwnProperty(iter107))
      {
        iter107 = this.spans[iter107];
        iter107.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.kBoltEnvKeyBasePath = 'BOLT_BASE_PATH';
ttypes.kBoltDefaultEnvBasePath = '/tmp/';
ttypes.kBoltEnvKeyPathPrefix = 'BOLT';
ttypes.kDefaultThriftServiceIOThreads = 2;
ttypes.kConcordEnvKeyClientListenAddr = 'CONCORD_client_listen_address';
ttypes.kConcordEnvKeyClientProxyAddr = 'CONCORD_client_proxy_address';
ttypes.kDatabasePath = '/tmp';
ttypes.kDatabaseEntryTTL = 43200;
ttypes.kDefaultBatchSize = 2048;
ttypes.kDefaultTraceSampleEveryN = 1024;
ttypes.kPrincipalComputationName = 'principal_computation';
ttypes.kIncomingMessageQueueTopic = 'incoming';
ttypes.kPrincipalTimerQueueTopic = 'principal_timers';
ttypes.kOutgoingMessageQueueTopic = 'outgoing';
ttypes.kQueueStreamNameToIdMapTopic = 'stream_map';
ttypes.kMessageQueueWatermarkTopic = 'watermarks';
ttypes.kMessageQueueBatchSize = 1024;
ttypes.kMessageQueueTTL = 21600;
ttypes.kBoltTraceHeader = 'bolt_traces';
