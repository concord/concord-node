//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./bolt_types');
//HELPER FUNCTIONS AND STRUCTURES

BoltSchedulerService_deployComputation_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
BoltSchedulerService_deployComputation_args.prototype = {};
BoltSchedulerService_deployComputation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new ttypes.BoltComputationRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BoltSchedulerService_deployComputation_args.prototype.write = function(output) {
  output.writeStructBegin('BoltSchedulerService_deployComputation_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BoltSchedulerService_deployComputation_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.BoltError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
BoltSchedulerService_deployComputation_result.prototype = {};
BoltSchedulerService_deployComputation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.BoltError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BoltSchedulerService_deployComputation_result.prototype.write = function(output) {
  output.writeStructBegin('BoltSchedulerService_deployComputation_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BoltSchedulerService_getComputationSlug_args = function(args) {
  this.computationName = null;
  if (args) {
    if (args.computationName !== undefined) {
      this.computationName = args.computationName;
    }
  }
};
BoltSchedulerService_getComputationSlug_args.prototype = {};
BoltSchedulerService_getComputationSlug_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.computationName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BoltSchedulerService_getComputationSlug_args.prototype.write = function(output) {
  output.writeStructBegin('BoltSchedulerService_getComputationSlug_args');
  if (this.computationName !== null && this.computationName !== undefined) {
    output.writeFieldBegin('computationName', Thrift.Type.STRING, 1);
    output.writeString(this.computationName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BoltSchedulerService_getComputationSlug_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.BoltError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
BoltSchedulerService_getComputationSlug_result.prototype = {};
BoltSchedulerService_getComputationSlug_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.BoltError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BoltSchedulerService_getComputationSlug_result.prototype.write = function(output) {
  output.writeStructBegin('BoltSchedulerService_getComputationSlug_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BoltSchedulerService_registerComputation_args = function(args) {
  this.computation = null;
  if (args) {
    if (args.computation !== undefined) {
      this.computation = args.computation;
    }
  }
};
BoltSchedulerService_registerComputation_args.prototype = {};
BoltSchedulerService_registerComputation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.computation = new ttypes.ComputationMetadata();
        this.computation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BoltSchedulerService_registerComputation_args.prototype.write = function(output) {
  output.writeStructBegin('BoltSchedulerService_registerComputation_args');
  if (this.computation !== null && this.computation !== undefined) {
    output.writeFieldBegin('computation', Thrift.Type.STRUCT, 1);
    this.computation.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BoltSchedulerService_registerComputation_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.BoltError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
BoltSchedulerService_registerComputation_result.prototype = {};
BoltSchedulerService_registerComputation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.BoltError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BoltSchedulerService_registerComputation_result.prototype.write = function(output) {
  output.writeStructBegin('BoltSchedulerService_registerComputation_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BoltSchedulerService_scaleComputation_args = function(args) {
  this.computationName = null;
  this.instances = null;
  if (args) {
    if (args.computationName !== undefined) {
      this.computationName = args.computationName;
    }
    if (args.instances !== undefined) {
      this.instances = args.instances;
    }
  }
};
BoltSchedulerService_scaleComputation_args.prototype = {};
BoltSchedulerService_scaleComputation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.computationName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.instances = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BoltSchedulerService_scaleComputation_args.prototype.write = function(output) {
  output.writeStructBegin('BoltSchedulerService_scaleComputation_args');
  if (this.computationName !== null && this.computationName !== undefined) {
    output.writeFieldBegin('computationName', Thrift.Type.STRING, 1);
    output.writeString(this.computationName);
    output.writeFieldEnd();
  }
  if (this.instances !== null && this.instances !== undefined) {
    output.writeFieldBegin('instances', Thrift.Type.I64, 2);
    output.writeI64(this.instances);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BoltSchedulerService_scaleComputation_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.BoltError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
BoltSchedulerService_scaleComputation_result.prototype = {};
BoltSchedulerService_scaleComputation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.BoltError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BoltSchedulerService_scaleComputation_result.prototype.write = function(output) {
  output.writeStructBegin('BoltSchedulerService_scaleComputation_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BoltSchedulerService_killTask_args = function(args) {
  this.taskId = null;
  if (args) {
    if (args.taskId !== undefined) {
      this.taskId = args.taskId;
    }
  }
};
BoltSchedulerService_killTask_args.prototype = {};
BoltSchedulerService_killTask_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.taskId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BoltSchedulerService_killTask_args.prototype.write = function(output) {
  output.writeStructBegin('BoltSchedulerService_killTask_args');
  if (this.taskId !== null && this.taskId !== undefined) {
    output.writeFieldBegin('taskId', Thrift.Type.STRING, 1);
    output.writeString(this.taskId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BoltSchedulerService_killTask_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.BoltError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
BoltSchedulerService_killTask_result.prototype = {};
BoltSchedulerService_killTask_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.BoltError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BoltSchedulerService_killTask_result.prototype.write = function(output) {
  output.writeStructBegin('BoltSchedulerService_killTask_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BoltSchedulerServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
BoltSchedulerServiceClient.prototype = {};
BoltSchedulerServiceClient.prototype.seqid = function() { return this._seqid; }
BoltSchedulerServiceClient.prototype.new_seqid = function() { return this._seqid += 1; }
BoltSchedulerServiceClient.prototype.deployComputation = function(request, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deployComputation(request);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deployComputation(request);
  }
};

BoltSchedulerServiceClient.prototype.send_deployComputation = function(request) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deployComputation', Thrift.MessageType.CALL, this.seqid());
  var args = new BoltSchedulerService_deployComputation_args();
  args.request = request;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BoltSchedulerServiceClient.prototype.recv_deployComputation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BoltSchedulerService_deployComputation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
BoltSchedulerServiceClient.prototype.getComputationSlug = function(computationName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getComputationSlug(computationName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getComputationSlug(computationName);
  }
};

BoltSchedulerServiceClient.prototype.send_getComputationSlug = function(computationName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getComputationSlug', Thrift.MessageType.CALL, this.seqid());
  var args = new BoltSchedulerService_getComputationSlug_args();
  args.computationName = computationName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BoltSchedulerServiceClient.prototype.recv_getComputationSlug = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BoltSchedulerService_getComputationSlug_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getComputationSlug failed: unknown result');
};
BoltSchedulerServiceClient.prototype.registerComputation = function(computation, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_registerComputation(computation);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_registerComputation(computation);
  }
};

BoltSchedulerServiceClient.prototype.send_registerComputation = function(computation) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('registerComputation', Thrift.MessageType.CALL, this.seqid());
  var args = new BoltSchedulerService_registerComputation_args();
  args.computation = computation;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BoltSchedulerServiceClient.prototype.recv_registerComputation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BoltSchedulerService_registerComputation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
BoltSchedulerServiceClient.prototype.scaleComputation = function(computationName, instances, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_scaleComputation(computationName, instances);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_scaleComputation(computationName, instances);
  }
};

BoltSchedulerServiceClient.prototype.send_scaleComputation = function(computationName, instances) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scaleComputation', Thrift.MessageType.CALL, this.seqid());
  var args = new BoltSchedulerService_scaleComputation_args();
  args.computationName = computationName;
  args.instances = instances;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BoltSchedulerServiceClient.prototype.recv_scaleComputation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BoltSchedulerService_scaleComputation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
BoltSchedulerServiceClient.prototype.killTask = function(taskId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_killTask(taskId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_killTask(taskId);
  }
};

BoltSchedulerServiceClient.prototype.send_killTask = function(taskId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('killTask', Thrift.MessageType.CALL, this.seqid());
  var args = new BoltSchedulerService_killTask_args();
  args.taskId = taskId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BoltSchedulerServiceClient.prototype.recv_killTask = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BoltSchedulerService_killTask_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
BoltSchedulerServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
BoltSchedulerServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

BoltSchedulerServiceProcessor.prototype.process_deployComputation = function(seqid, input, output) {
  var args = new BoltSchedulerService_deployComputation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deployComputation.length === 1) {
    Q.fcall(this._handler.deployComputation, args.request)
      .then(function(result) {
        var result = new BoltSchedulerService_deployComputation_result({success: result});
        output.writeMessageBegin("deployComputation", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BoltSchedulerService_deployComputation_result(err);
        output.writeMessageBegin("deployComputation", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deployComputation(args.request,  function (err, result) {
      var result = new BoltSchedulerService_deployComputation_result((err != null ? err : {success: result}));
      output.writeMessageBegin("deployComputation", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BoltSchedulerServiceProcessor.prototype.process_getComputationSlug = function(seqid, input, output) {
  var args = new BoltSchedulerService_getComputationSlug_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getComputationSlug.length === 1) {
    Q.fcall(this._handler.getComputationSlug, args.computationName)
      .then(function(result) {
        var result = new BoltSchedulerService_getComputationSlug_result({success: result});
        output.writeMessageBegin("getComputationSlug", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BoltSchedulerService_getComputationSlug_result(err);
        output.writeMessageBegin("getComputationSlug", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getComputationSlug(args.computationName,  function (err, result) {
      var result = new BoltSchedulerService_getComputationSlug_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getComputationSlug", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BoltSchedulerServiceProcessor.prototype.process_registerComputation = function(seqid, input, output) {
  var args = new BoltSchedulerService_registerComputation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.registerComputation.length === 1) {
    Q.fcall(this._handler.registerComputation, args.computation)
      .then(function(result) {
        var result = new BoltSchedulerService_registerComputation_result({success: result});
        output.writeMessageBegin("registerComputation", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BoltSchedulerService_registerComputation_result(err);
        output.writeMessageBegin("registerComputation", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.registerComputation(args.computation,  function (err, result) {
      var result = new BoltSchedulerService_registerComputation_result((err != null ? err : {success: result}));
      output.writeMessageBegin("registerComputation", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BoltSchedulerServiceProcessor.prototype.process_scaleComputation = function(seqid, input, output) {
  var args = new BoltSchedulerService_scaleComputation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.scaleComputation.length === 2) {
    Q.fcall(this._handler.scaleComputation, args.computationName, args.instances)
      .then(function(result) {
        var result = new BoltSchedulerService_scaleComputation_result({success: result});
        output.writeMessageBegin("scaleComputation", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BoltSchedulerService_scaleComputation_result(err);
        output.writeMessageBegin("scaleComputation", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.scaleComputation(args.computationName, args.instances,  function (err, result) {
      var result = new BoltSchedulerService_scaleComputation_result((err != null ? err : {success: result}));
      output.writeMessageBegin("scaleComputation", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BoltSchedulerServiceProcessor.prototype.process_killTask = function(seqid, input, output) {
  var args = new BoltSchedulerService_killTask_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.killTask.length === 1) {
    Q.fcall(this._handler.killTask, args.taskId)
      .then(function(result) {
        var result = new BoltSchedulerService_killTask_result({success: result});
        output.writeMessageBegin("killTask", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BoltSchedulerService_killTask_result(err);
        output.writeMessageBegin("killTask", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.killTask(args.taskId,  function (err, result) {
      var result = new BoltSchedulerService_killTask_result((err != null ? err : {success: result}));
      output.writeMessageBegin("killTask", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

