//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./bolt_types');
//HELPER FUNCTIONS AND STRUCTURES

BoltTraceAggregatorService_submitSpans_args = function(args) {
  this.span = null;
  if (args) {
    if (args.span !== undefined) {
      this.span = args.span;
    }
  }
};
BoltTraceAggregatorService_submitSpans_args.prototype = {};
BoltTraceAggregatorService_submitSpans_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size132 = 0;
        var _rtmp3136;
        this.span = [];
        var _etype135 = 0;
        _rtmp3136 = input.readListBegin();
        _etype135 = _rtmp3136.etype;
        _size132 = _rtmp3136.size;
        for (var _i137 = 0; _i137 < _size132; ++_i137)
        {
          var elem138 = null;
          elem138 = new ttypes.Span();
          elem138.read(input);
          this.span.push(elem138);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BoltTraceAggregatorService_submitSpans_args.prototype.write = function(output) {
  output.writeStructBegin('BoltTraceAggregatorService_submitSpans_args');
  if (this.span !== null && this.span !== undefined) {
    output.writeFieldBegin('span', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.span.length);
    for (var iter139 in this.span)
    {
      if (this.span.hasOwnProperty(iter139))
      {
        iter139 = this.span[iter139];
        iter139.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BoltTraceAggregatorService_submitSpans_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.BoltError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
BoltTraceAggregatorService_submitSpans_result.prototype = {};
BoltTraceAggregatorService_submitSpans_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.BoltError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BoltTraceAggregatorService_submitSpans_result.prototype.write = function(output) {
  output.writeStructBegin('BoltTraceAggregatorService_submitSpans_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BoltTraceAggregatorService_getTrace_args = function(args) {
  this.traceId = null;
  if (args) {
    if (args.traceId !== undefined) {
      this.traceId = args.traceId;
    }
  }
};
BoltTraceAggregatorService_getTrace_args.prototype = {};
BoltTraceAggregatorService_getTrace_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.traceId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BoltTraceAggregatorService_getTrace_args.prototype.write = function(output) {
  output.writeStructBegin('BoltTraceAggregatorService_getTrace_args');
  if (this.traceId !== null && this.traceId !== undefined) {
    output.writeFieldBegin('traceId', Thrift.Type.I64, 1);
    output.writeI64(this.traceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BoltTraceAggregatorService_getTrace_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.BoltError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
BoltTraceAggregatorService_getTrace_result.prototype = {};
BoltTraceAggregatorService_getTrace_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size140 = 0;
        var _rtmp3144;
        this.success = [];
        var _etype143 = 0;
        _rtmp3144 = input.readListBegin();
        _etype143 = _rtmp3144.etype;
        _size140 = _rtmp3144.size;
        for (var _i145 = 0; _i145 < _size140; ++_i145)
        {
          var elem146 = null;
          elem146 = new ttypes.Span();
          elem146.read(input);
          this.success.push(elem146);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.BoltError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BoltTraceAggregatorService_getTrace_result.prototype.write = function(output) {
  output.writeStructBegin('BoltTraceAggregatorService_getTrace_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter147 in this.success)
    {
      if (this.success.hasOwnProperty(iter147))
      {
        iter147 = this.success[iter147];
        iter147.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BoltTraceAggregatorService_getTraceIds_args = function(args) {
  this.startId = 0;
  this.limit = 100;
  if (args) {
    if (args.startId !== undefined) {
      this.startId = args.startId;
    }
    if (args.limit !== undefined) {
      this.limit = args.limit;
    }
  }
};
BoltTraceAggregatorService_getTraceIds_args.prototype = {};
BoltTraceAggregatorService_getTraceIds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.startId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BoltTraceAggregatorService_getTraceIds_args.prototype.write = function(output) {
  output.writeStructBegin('BoltTraceAggregatorService_getTraceIds_args');
  if (this.startId !== null && this.startId !== undefined) {
    output.writeFieldBegin('startId', Thrift.Type.I64, 1);
    output.writeI64(this.startId);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 2);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BoltTraceAggregatorService_getTraceIds_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.BoltError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
BoltTraceAggregatorService_getTraceIds_result.prototype = {};
BoltTraceAggregatorService_getTraceIds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size148 = 0;
        var _rtmp3152;
        this.success = [];
        var _etype151 = 0;
        _rtmp3152 = input.readListBegin();
        _etype151 = _rtmp3152.etype;
        _size148 = _rtmp3152.size;
        for (var _i153 = 0; _i153 < _size148; ++_i153)
        {
          var elem154 = null;
          elem154 = input.readI64();
          this.success.push(elem154);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.BoltError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BoltTraceAggregatorService_getTraceIds_result.prototype.write = function(output) {
  output.writeStructBegin('BoltTraceAggregatorService_getTraceIds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I64, this.success.length);
    for (var iter155 in this.success)
    {
      if (this.success.hasOwnProperty(iter155))
      {
        iter155 = this.success[iter155];
        output.writeI64(iter155);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BoltTraceAggregatorService_consolidateTraceIds_args = function(args) {
  this.traceIds = null;
  if (args) {
    if (args.traceIds !== undefined) {
      this.traceIds = args.traceIds;
    }
  }
};
BoltTraceAggregatorService_consolidateTraceIds_args.prototype = {};
BoltTraceAggregatorService_consolidateTraceIds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size156 = 0;
        var _rtmp3160;
        this.traceIds = [];
        var _etype159 = 0;
        _rtmp3160 = input.readListBegin();
        _etype159 = _rtmp3160.etype;
        _size156 = _rtmp3160.size;
        for (var _i161 = 0; _i161 < _size156; ++_i161)
        {
          var elem162 = null;
          elem162 = input.readI64();
          this.traceIds.push(elem162);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BoltTraceAggregatorService_consolidateTraceIds_args.prototype.write = function(output) {
  output.writeStructBegin('BoltTraceAggregatorService_consolidateTraceIds_args');
  if (this.traceIds !== null && this.traceIds !== undefined) {
    output.writeFieldBegin('traceIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.traceIds.length);
    for (var iter163 in this.traceIds)
    {
      if (this.traceIds.hasOwnProperty(iter163))
      {
        iter163 = this.traceIds[iter163];
        output.writeI64(iter163);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BoltTraceAggregatorService_consolidateTraceIds_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.BoltError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
BoltTraceAggregatorService_consolidateTraceIds_result.prototype = {};
BoltTraceAggregatorService_consolidateTraceIds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.BoltError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BoltTraceAggregatorService_consolidateTraceIds_result.prototype.write = function(output) {
  output.writeStructBegin('BoltTraceAggregatorService_consolidateTraceIds_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BoltTraceAggregatorServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
BoltTraceAggregatorServiceClient.prototype = {};
BoltTraceAggregatorServiceClient.prototype.seqid = function() { return this._seqid; }
BoltTraceAggregatorServiceClient.prototype.new_seqid = function() { return this._seqid += 1; }
BoltTraceAggregatorServiceClient.prototype.submitSpans = function(span, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_submitSpans(span);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_submitSpans(span);
  }
};

BoltTraceAggregatorServiceClient.prototype.send_submitSpans = function(span) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('submitSpans', Thrift.MessageType.CALL, this.seqid());
  var args = new BoltTraceAggregatorService_submitSpans_args();
  args.span = span;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BoltTraceAggregatorServiceClient.prototype.recv_submitSpans = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BoltTraceAggregatorService_submitSpans_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
BoltTraceAggregatorServiceClient.prototype.getTrace = function(traceId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getTrace(traceId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getTrace(traceId);
  }
};

BoltTraceAggregatorServiceClient.prototype.send_getTrace = function(traceId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTrace', Thrift.MessageType.CALL, this.seqid());
  var args = new BoltTraceAggregatorService_getTrace_args();
  args.traceId = traceId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BoltTraceAggregatorServiceClient.prototype.recv_getTrace = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BoltTraceAggregatorService_getTrace_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTrace failed: unknown result');
};
BoltTraceAggregatorServiceClient.prototype.getTraceIds = function(startId, limit, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getTraceIds(startId, limit);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getTraceIds(startId, limit);
  }
};

BoltTraceAggregatorServiceClient.prototype.send_getTraceIds = function(startId, limit) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTraceIds', Thrift.MessageType.CALL, this.seqid());
  var args = new BoltTraceAggregatorService_getTraceIds_args();
  args.startId = startId;
  args.limit = limit;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BoltTraceAggregatorServiceClient.prototype.recv_getTraceIds = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BoltTraceAggregatorService_getTraceIds_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTraceIds failed: unknown result');
};
BoltTraceAggregatorServiceClient.prototype.consolidateTraceIds = function(traceIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_consolidateTraceIds(traceIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_consolidateTraceIds(traceIds);
  }
};

BoltTraceAggregatorServiceClient.prototype.send_consolidateTraceIds = function(traceIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('consolidateTraceIds', Thrift.MessageType.CALL, this.seqid());
  var args = new BoltTraceAggregatorService_consolidateTraceIds_args();
  args.traceIds = traceIds;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BoltTraceAggregatorServiceClient.prototype.recv_consolidateTraceIds = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BoltTraceAggregatorService_consolidateTraceIds_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
BoltTraceAggregatorServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
BoltTraceAggregatorServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

BoltTraceAggregatorServiceProcessor.prototype.process_submitSpans = function(seqid, input, output) {
  var args = new BoltTraceAggregatorService_submitSpans_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.submitSpans.length === 1) {
    Q.fcall(this._handler.submitSpans, args.span)
      .then(function(result) {
        var result = new BoltTraceAggregatorService_submitSpans_result({success: result});
        output.writeMessageBegin("submitSpans", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BoltTraceAggregatorService_submitSpans_result(err);
        output.writeMessageBegin("submitSpans", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.submitSpans(args.span,  function (err, result) {
      var result = new BoltTraceAggregatorService_submitSpans_result((err != null ? err : {success: result}));
      output.writeMessageBegin("submitSpans", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BoltTraceAggregatorServiceProcessor.prototype.process_getTrace = function(seqid, input, output) {
  var args = new BoltTraceAggregatorService_getTrace_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getTrace.length === 1) {
    Q.fcall(this._handler.getTrace, args.traceId)
      .then(function(result) {
        var result = new BoltTraceAggregatorService_getTrace_result({success: result});
        output.writeMessageBegin("getTrace", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BoltTraceAggregatorService_getTrace_result(err);
        output.writeMessageBegin("getTrace", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getTrace(args.traceId,  function (err, result) {
      var result = new BoltTraceAggregatorService_getTrace_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getTrace", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BoltTraceAggregatorServiceProcessor.prototype.process_getTraceIds = function(seqid, input, output) {
  var args = new BoltTraceAggregatorService_getTraceIds_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getTraceIds.length === 2) {
    Q.fcall(this._handler.getTraceIds, args.startId, args.limit)
      .then(function(result) {
        var result = new BoltTraceAggregatorService_getTraceIds_result({success: result});
        output.writeMessageBegin("getTraceIds", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BoltTraceAggregatorService_getTraceIds_result(err);
        output.writeMessageBegin("getTraceIds", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getTraceIds(args.startId, args.limit,  function (err, result) {
      var result = new BoltTraceAggregatorService_getTraceIds_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getTraceIds", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BoltTraceAggregatorServiceProcessor.prototype.process_consolidateTraceIds = function(seqid, input, output) {
  var args = new BoltTraceAggregatorService_consolidateTraceIds_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.consolidateTraceIds.length === 1) {
    Q.fcall(this._handler.consolidateTraceIds, args.traceIds)
      .then(function(result) {
        var result = new BoltTraceAggregatorService_consolidateTraceIds_result({success: result});
        output.writeMessageBegin("consolidateTraceIds", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BoltTraceAggregatorService_consolidateTraceIds_result(err);
        output.writeMessageBegin("consolidateTraceIds", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.consolidateTraceIds(args.traceIds,  function (err, result) {
      var result = new BoltTraceAggregatorService_consolidateTraceIds_result((err != null ? err : {success: result}));
      output.writeMessageBegin("consolidateTraceIds", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

