//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./bolt_types');
//HELPER FUNCTIONS AND STRUCTURES

ComputationService_init_args = function(args) {
};
ComputationService_init_args.prototype = {};
ComputationService_init_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ComputationService_init_args.prototype.write = function(output) {
  output.writeStructBegin('ComputationService_init_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ComputationService_init_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.BoltError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
ComputationService_init_result.prototype = {};
ComputationService_init_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ComputationTx();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.BoltError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ComputationService_init_result.prototype.write = function(output) {
  output.writeStructBegin('ComputationService_init_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ComputationService_boltProcessRecords_args = function(args) {
  this.records = null;
  if (args) {
    if (args.records !== undefined) {
      this.records = args.records;
    }
  }
};
ComputationService_boltProcessRecords_args.prototype = {};
ComputationService_boltProcessRecords_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size108 = 0;
        var _rtmp3112;
        this.records = [];
        var _etype111 = 0;
        _rtmp3112 = input.readListBegin();
        _etype111 = _rtmp3112.etype;
        _size108 = _rtmp3112.size;
        for (var _i113 = 0; _i113 < _size108; ++_i113)
        {
          var elem114 = null;
          elem114 = new ttypes.Record();
          elem114.read(input);
          this.records.push(elem114);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ComputationService_boltProcessRecords_args.prototype.write = function(output) {
  output.writeStructBegin('ComputationService_boltProcessRecords_args');
  if (this.records !== null && this.records !== undefined) {
    output.writeFieldBegin('records', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.records.length);
    for (var iter115 in this.records)
    {
      if (this.records.hasOwnProperty(iter115))
      {
        iter115 = this.records[iter115];
        iter115.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ComputationService_boltProcessRecords_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.BoltError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
ComputationService_boltProcessRecords_result.prototype = {};
ComputationService_boltProcessRecords_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size116 = 0;
        var _rtmp3120;
        this.success = [];
        var _etype119 = 0;
        _rtmp3120 = input.readListBegin();
        _etype119 = _rtmp3120.etype;
        _size116 = _rtmp3120.size;
        for (var _i121 = 0; _i121 < _size116; ++_i121)
        {
          var elem122 = null;
          elem122 = new ttypes.ComputationTx();
          elem122.read(input);
          this.success.push(elem122);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.BoltError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ComputationService_boltProcessRecords_result.prototype.write = function(output) {
  output.writeStructBegin('ComputationService_boltProcessRecords_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter123 in this.success)
    {
      if (this.success.hasOwnProperty(iter123))
      {
        iter123 = this.success[iter123];
        iter123.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ComputationService_boltProcessTimer_args = function(args) {
  this.key = null;
  this.time = null;
  if (args) {
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.time !== undefined) {
      this.time = args.time;
    }
  }
};
ComputationService_boltProcessTimer_args.prototype = {};
ComputationService_boltProcessTimer_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ComputationService_boltProcessTimer_args.prototype.write = function(output) {
  output.writeStructBegin('ComputationService_boltProcessTimer_args');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.I64, 2);
    output.writeI64(this.time);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ComputationService_boltProcessTimer_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.BoltError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
ComputationService_boltProcessTimer_result.prototype = {};
ComputationService_boltProcessTimer_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ComputationTx();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.BoltError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ComputationService_boltProcessTimer_result.prototype.write = function(output) {
  output.writeStructBegin('ComputationService_boltProcessTimer_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ComputationService_boltMetadata_args = function(args) {
};
ComputationService_boltMetadata_args.prototype = {};
ComputationService_boltMetadata_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ComputationService_boltMetadata_args.prototype.write = function(output) {
  output.writeStructBegin('ComputationService_boltMetadata_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ComputationService_boltMetadata_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.BoltError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
ComputationService_boltMetadata_result.prototype = {};
ComputationService_boltMetadata_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ComputationMetadata();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.BoltError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ComputationService_boltMetadata_result.prototype.write = function(output) {
  output.writeStructBegin('ComputationService_boltMetadata_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ComputationServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
ComputationServiceClient.prototype = {};
ComputationServiceClient.prototype.seqid = function() { return this._seqid; }
ComputationServiceClient.prototype.new_seqid = function() { return this._seqid += 1; }
ComputationServiceClient.prototype.init = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_init();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_init();
  }
};

ComputationServiceClient.prototype.send_init = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('init', Thrift.MessageType.CALL, this.seqid());
  var args = new ComputationService_init_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ComputationServiceClient.prototype.recv_init = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ComputationService_init_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('init failed: unknown result');
};
ComputationServiceClient.prototype.boltProcessRecords = function(records, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_boltProcessRecords(records);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_boltProcessRecords(records);
  }
};

ComputationServiceClient.prototype.send_boltProcessRecords = function(records) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('boltProcessRecords', Thrift.MessageType.CALL, this.seqid());
  var args = new ComputationService_boltProcessRecords_args();
  args.records = records;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ComputationServiceClient.prototype.recv_boltProcessRecords = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ComputationService_boltProcessRecords_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('boltProcessRecords failed: unknown result');
};
ComputationServiceClient.prototype.boltProcessTimer = function(key, time, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_boltProcessTimer(key, time);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_boltProcessTimer(key, time);
  }
};

ComputationServiceClient.prototype.send_boltProcessTimer = function(key, time) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('boltProcessTimer', Thrift.MessageType.CALL, this.seqid());
  var args = new ComputationService_boltProcessTimer_args();
  args.key = key;
  args.time = time;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ComputationServiceClient.prototype.recv_boltProcessTimer = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ComputationService_boltProcessTimer_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('boltProcessTimer failed: unknown result');
};
ComputationServiceClient.prototype.boltMetadata = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_boltMetadata();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_boltMetadata();
  }
};

ComputationServiceClient.prototype.send_boltMetadata = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('boltMetadata', Thrift.MessageType.CALL, this.seqid());
  var args = new ComputationService_boltMetadata_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ComputationServiceClient.prototype.recv_boltMetadata = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ComputationService_boltMetadata_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('boltMetadata failed: unknown result');
};
ComputationServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
ComputationServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

ComputationServiceProcessor.prototype.process_init = function(seqid, input, output) {
  var args = new ComputationService_init_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.init.length === 0) {
    Q.fcall(this._handler.init)
      .then(function(result) {
        var result = new ComputationService_init_result({success: result});
        output.writeMessageBegin("init", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ComputationService_init_result(err);
        output.writeMessageBegin("init", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.init( function (err, result) {
      var result = new ComputationService_init_result((err != null ? err : {success: result}));
      output.writeMessageBegin("init", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ComputationServiceProcessor.prototype.process_boltProcessRecords = function(seqid, input, output) {
  var args = new ComputationService_boltProcessRecords_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.boltProcessRecords.length === 1) {
    Q.fcall(this._handler.boltProcessRecords, args.records)
      .then(function(result) {
        var result = new ComputationService_boltProcessRecords_result({success: result});
        output.writeMessageBegin("boltProcessRecords", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ComputationService_boltProcessRecords_result(err);
        output.writeMessageBegin("boltProcessRecords", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.boltProcessRecords(args.records,  function (err, result) {
      var result = new ComputationService_boltProcessRecords_result((err != null ? err : {success: result}));
      output.writeMessageBegin("boltProcessRecords", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ComputationServiceProcessor.prototype.process_boltProcessTimer = function(seqid, input, output) {
  var args = new ComputationService_boltProcessTimer_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.boltProcessTimer.length === 2) {
    Q.fcall(this._handler.boltProcessTimer, args.key, args.time)
      .then(function(result) {
        var result = new ComputationService_boltProcessTimer_result({success: result});
        output.writeMessageBegin("boltProcessTimer", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ComputationService_boltProcessTimer_result(err);
        output.writeMessageBegin("boltProcessTimer", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.boltProcessTimer(args.key, args.time,  function (err, result) {
      var result = new ComputationService_boltProcessTimer_result((err != null ? err : {success: result}));
      output.writeMessageBegin("boltProcessTimer", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ComputationServiceProcessor.prototype.process_boltMetadata = function(seqid, input, output) {
  var args = new ComputationService_boltMetadata_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.boltMetadata.length === 0) {
    Q.fcall(this._handler.boltMetadata)
      .then(function(result) {
        var result = new ComputationService_boltMetadata_result({success: result});
        output.writeMessageBegin("boltMetadata", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ComputationService_boltMetadata_result(err);
        output.writeMessageBegin("boltMetadata", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.boltMetadata( function (err, result) {
      var result = new ComputationService_boltMetadata_result((err != null ? err : {success: result}));
      output.writeMessageBegin("boltMetadata", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

