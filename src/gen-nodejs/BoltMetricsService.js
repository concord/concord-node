//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./bolt_types');
//HELPER FUNCTIONS AND STRUCTURES

BoltMetricsService_gauge_args = function(args) {
  this.name = null;
  this.val = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.val !== undefined) {
      this.val = args.val;
    }
  }
};
BoltMetricsService_gauge_args.prototype = {};
BoltMetricsService_gauge_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.val = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BoltMetricsService_gauge_args.prototype.write = function(output) {
  output.writeStructBegin('BoltMetricsService_gauge_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.val !== null && this.val !== undefined) {
    output.writeFieldBegin('val', Thrift.Type.I64, 2);
    output.writeI64(this.val);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BoltMetricsService_gauge_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.BoltError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
BoltMetricsService_gauge_result.prototype = {};
BoltMetricsService_gauge_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.BoltError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BoltMetricsService_gauge_result.prototype.write = function(output) {
  output.writeStructBegin('BoltMetricsService_gauge_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BoltMetricsService_timer_args = function(args) {
  this.name = null;
  this.duration = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.duration !== undefined) {
      this.duration = args.duration;
    }
  }
};
BoltMetricsService_timer_args.prototype = {};
BoltMetricsService_timer_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.duration = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BoltMetricsService_timer_args.prototype.write = function(output) {
  output.writeStructBegin('BoltMetricsService_timer_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.duration !== null && this.duration !== undefined) {
    output.writeFieldBegin('duration', Thrift.Type.I64, 2);
    output.writeI64(this.duration);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BoltMetricsService_timer_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.BoltError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
BoltMetricsService_timer_result.prototype = {};
BoltMetricsService_timer_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.BoltError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BoltMetricsService_timer_result.prototype.write = function(output) {
  output.writeStructBegin('BoltMetricsService_timer_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BoltMetricsService_histogram_args = function(args) {
  this.name = null;
  this.measure = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.measure !== undefined) {
      this.measure = args.measure;
    }
  }
};
BoltMetricsService_histogram_args.prototype = {};
BoltMetricsService_histogram_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.measure = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BoltMetricsService_histogram_args.prototype.write = function(output) {
  output.writeStructBegin('BoltMetricsService_histogram_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.measure !== null && this.measure !== undefined) {
    output.writeFieldBegin('measure', Thrift.Type.I64, 2);
    output.writeI64(this.measure);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BoltMetricsService_histogram_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.BoltError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
BoltMetricsService_histogram_result.prototype = {};
BoltMetricsService_histogram_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.BoltError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BoltMetricsService_histogram_result.prototype.write = function(output) {
  output.writeStructBegin('BoltMetricsService_histogram_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BoltMetricsService_sum_args = function(args) {
  this.name = null;
  this.counter = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.counter !== undefined) {
      this.counter = args.counter;
    }
  }
};
BoltMetricsService_sum_args.prototype = {};
BoltMetricsService_sum_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.counter = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BoltMetricsService_sum_args.prototype.write = function(output) {
  output.writeStructBegin('BoltMetricsService_sum_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.counter !== null && this.counter !== undefined) {
    output.writeFieldBegin('counter', Thrift.Type.I64, 2);
    output.writeI64(this.counter);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BoltMetricsService_sum_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.BoltError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
BoltMetricsService_sum_result.prototype = {};
BoltMetricsService_sum_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.BoltError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BoltMetricsService_sum_result.prototype.write = function(output) {
  output.writeStructBegin('BoltMetricsService_sum_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BoltMetricsServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
BoltMetricsServiceClient.prototype = {};
BoltMetricsServiceClient.prototype.seqid = function() { return this._seqid; }
BoltMetricsServiceClient.prototype.new_seqid = function() { return this._seqid += 1; }
BoltMetricsServiceClient.prototype.gauge = function(name, val, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_gauge(name, val);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_gauge(name, val);
  }
};

BoltMetricsServiceClient.prototype.send_gauge = function(name, val) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('gauge', Thrift.MessageType.CALL, this.seqid());
  var args = new BoltMetricsService_gauge_args();
  args.name = name;
  args.val = val;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BoltMetricsServiceClient.prototype.recv_gauge = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BoltMetricsService_gauge_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
BoltMetricsServiceClient.prototype.timer = function(name, duration, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_timer(name, duration);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_timer(name, duration);
  }
};

BoltMetricsServiceClient.prototype.send_timer = function(name, duration) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('timer', Thrift.MessageType.CALL, this.seqid());
  var args = new BoltMetricsService_timer_args();
  args.name = name;
  args.duration = duration;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BoltMetricsServiceClient.prototype.recv_timer = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BoltMetricsService_timer_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
BoltMetricsServiceClient.prototype.histogram = function(name, measure, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_histogram(name, measure);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_histogram(name, measure);
  }
};

BoltMetricsServiceClient.prototype.send_histogram = function(name, measure) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('histogram', Thrift.MessageType.CALL, this.seqid());
  var args = new BoltMetricsService_histogram_args();
  args.name = name;
  args.measure = measure;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BoltMetricsServiceClient.prototype.recv_histogram = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BoltMetricsService_histogram_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
BoltMetricsServiceClient.prototype.sum = function(name, counter, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sum(name, counter);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sum(name, counter);
  }
};

BoltMetricsServiceClient.prototype.send_sum = function(name, counter) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sum', Thrift.MessageType.CALL, this.seqid());
  var args = new BoltMetricsService_sum_args();
  args.name = name;
  args.counter = counter;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BoltMetricsServiceClient.prototype.recv_sum = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BoltMetricsService_sum_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
BoltMetricsServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
BoltMetricsServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

BoltMetricsServiceProcessor.prototype.process_gauge = function(seqid, input, output) {
  var args = new BoltMetricsService_gauge_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.gauge.length === 2) {
    Q.fcall(this._handler.gauge, args.name, args.val)
      .then(function(result) {
        var result = new BoltMetricsService_gauge_result({success: result});
        output.writeMessageBegin("gauge", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BoltMetricsService_gauge_result(err);
        output.writeMessageBegin("gauge", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.gauge(args.name, args.val,  function (err, result) {
      var result = new BoltMetricsService_gauge_result((err != null ? err : {success: result}));
      output.writeMessageBegin("gauge", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BoltMetricsServiceProcessor.prototype.process_timer = function(seqid, input, output) {
  var args = new BoltMetricsService_timer_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.timer.length === 2) {
    Q.fcall(this._handler.timer, args.name, args.duration)
      .then(function(result) {
        var result = new BoltMetricsService_timer_result({success: result});
        output.writeMessageBegin("timer", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BoltMetricsService_timer_result(err);
        output.writeMessageBegin("timer", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.timer(args.name, args.duration,  function (err, result) {
      var result = new BoltMetricsService_timer_result((err != null ? err : {success: result}));
      output.writeMessageBegin("timer", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BoltMetricsServiceProcessor.prototype.process_histogram = function(seqid, input, output) {
  var args = new BoltMetricsService_histogram_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.histogram.length === 2) {
    Q.fcall(this._handler.histogram, args.name, args.measure)
      .then(function(result) {
        var result = new BoltMetricsService_histogram_result({success: result});
        output.writeMessageBegin("histogram", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BoltMetricsService_histogram_result(err);
        output.writeMessageBegin("histogram", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.histogram(args.name, args.measure,  function (err, result) {
      var result = new BoltMetricsService_histogram_result((err != null ? err : {success: result}));
      output.writeMessageBegin("histogram", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BoltMetricsServiceProcessor.prototype.process_sum = function(seqid, input, output) {
  var args = new BoltMetricsService_sum_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sum.length === 2) {
    Q.fcall(this._handler.sum, args.name, args.counter)
      .then(function(result) {
        var result = new BoltMetricsService_sum_result({success: result});
        output.writeMessageBegin("sum", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BoltMetricsService_sum_result(err);
        output.writeMessageBegin("sum", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sum(args.name, args.counter,  function (err, result) {
      var result = new BoltMetricsService_sum_result((err != null ? err : {success: result}));
      output.writeMessageBegin("sum", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

