//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./bolt_types');
//HELPER FUNCTIONS AND STRUCTURES

BoltManagerService_setEnvironmentVar_args = function(args) {
  this.name = null;
  this.value = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
BoltManagerService_setEnvironmentVar_args.prototype = {};
BoltManagerService_setEnvironmentVar_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BoltManagerService_setEnvironmentVar_args.prototype.write = function(output) {
  output.writeStructBegin('BoltManagerService_setEnvironmentVar_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BoltManagerService_setEnvironmentVar_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.BoltError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
BoltManagerService_setEnvironmentVar_result.prototype = {};
BoltManagerService_setEnvironmentVar_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.BoltError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BoltManagerService_setEnvironmentVar_result.prototype.write = function(output) {
  output.writeStructBegin('BoltManagerService_setEnvironmentVar_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BoltManagerService_signal_args = function(args) {
  this.topologyId = null;
  this.s = null;
  if (args) {
    if (args.topologyId !== undefined) {
      this.topologyId = args.topologyId;
    }
    if (args.s !== undefined) {
      this.s = args.s;
    }
  }
};
BoltManagerService_signal_args.prototype = {};
BoltManagerService_signal_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.topologyId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.s = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BoltManagerService_signal_args.prototype.write = function(output) {
  output.writeStructBegin('BoltManagerService_signal_args');
  if (this.topologyId !== null && this.topologyId !== undefined) {
    output.writeFieldBegin('topologyId', Thrift.Type.I64, 1);
    output.writeI64(this.topologyId);
    output.writeFieldEnd();
  }
  if (this.s !== null && this.s !== undefined) {
    output.writeFieldBegin('s', Thrift.Type.I32, 2);
    output.writeI32(this.s);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BoltManagerService_signal_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.BoltError) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
BoltManagerService_signal_result.prototype = {};
BoltManagerService_signal_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.BoltError();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BoltManagerService_signal_result.prototype.write = function(output) {
  output.writeStructBegin('BoltManagerService_signal_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BoltManagerServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
BoltManagerServiceClient.prototype = {};
BoltManagerServiceClient.prototype.seqid = function() { return this._seqid; }
BoltManagerServiceClient.prototype.new_seqid = function() { return this._seqid += 1; }
BoltManagerServiceClient.prototype.setEnvironmentVar = function(name, value, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setEnvironmentVar(name, value);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setEnvironmentVar(name, value);
  }
};

BoltManagerServiceClient.prototype.send_setEnvironmentVar = function(name, value) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setEnvironmentVar', Thrift.MessageType.CALL, this.seqid());
  var args = new BoltManagerService_setEnvironmentVar_args();
  args.name = name;
  args.value = value;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BoltManagerServiceClient.prototype.recv_setEnvironmentVar = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BoltManagerService_setEnvironmentVar_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
BoltManagerServiceClient.prototype.signal = function(topologyId, s, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_signal(topologyId, s);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_signal(topologyId, s);
  }
};

BoltManagerServiceClient.prototype.send_signal = function(topologyId, s) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('signal', Thrift.MessageType.CALL, this.seqid());
  var args = new BoltManagerService_signal_args();
  args.topologyId = topologyId;
  args.s = s;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BoltManagerServiceClient.prototype.recv_signal = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BoltManagerService_signal_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
BoltManagerServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
BoltManagerServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

BoltManagerServiceProcessor.prototype.process_setEnvironmentVar = function(seqid, input, output) {
  var args = new BoltManagerService_setEnvironmentVar_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setEnvironmentVar.length === 2) {
    Q.fcall(this._handler.setEnvironmentVar, args.name, args.value)
      .then(function(result) {
        var result = new BoltManagerService_setEnvironmentVar_result({success: result});
        output.writeMessageBegin("setEnvironmentVar", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BoltManagerService_setEnvironmentVar_result(err);
        output.writeMessageBegin("setEnvironmentVar", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.setEnvironmentVar(args.name, args.value,  function (err, result) {
      var result = new BoltManagerService_setEnvironmentVar_result((err != null ? err : {success: result}));
      output.writeMessageBegin("setEnvironmentVar", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

BoltManagerServiceProcessor.prototype.process_signal = function(seqid, input, output) {
  var args = new BoltManagerService_signal_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.signal.length === 2) {
    Q.fcall(this._handler.signal, args.topologyId, args.s)
      .then(function(result) {
        var result = new BoltManagerService_signal_result({success: result});
        output.writeMessageBegin("signal", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new BoltManagerService_signal_result(err);
        output.writeMessageBegin("signal", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.signal(args.topologyId, args.s,  function (err, result) {
      var result = new BoltManagerService_signal_result((err != null ? err : {success: result}));
      output.writeMessageBegin("signal", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

